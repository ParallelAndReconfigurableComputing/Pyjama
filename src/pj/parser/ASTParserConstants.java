/* Generated By:JavaCC: Do not edit this line. ASTParserConstants.java */
package pj.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ASTParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 6;
  /** RegularExpression Id. */
  int JAVA_DOC_COMMENT = 9;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 10;
  /** RegularExpression Id. */
  int ABSTRACT = 12;
  /** RegularExpression Id. */
  int ASSERT = 13;
  /** RegularExpression Id. */
  int BOOLEAN = 14;
  /** RegularExpression Id. */
  int BREAK = 15;
  /** RegularExpression Id. */
  int BYTE = 16;
  /** RegularExpression Id. */
  int CASE = 17;
  /** RegularExpression Id. */
  int CATCH = 18;
  /** RegularExpression Id. */
  int CHAR = 19;
  /** RegularExpression Id. */
  int CLASS = 20;
  /** RegularExpression Id. */
  int CONST = 21;
  /** RegularExpression Id. */
  int CONTINUE = 22;
  /** RegularExpression Id. */
  int _DEFAULT = 23;
  /** RegularExpression Id. */
  int DO = 24;
  /** RegularExpression Id. */
  int DOUBLE = 25;
  /** RegularExpression Id. */
  int ELSE = 26;
  /** RegularExpression Id. */
  int ENUM = 27;
  /** RegularExpression Id. */
  int EXTENDS = 28;
  /** RegularExpression Id. */
  int FALSE = 29;
  /** RegularExpression Id. */
  int FINAL = 30;
  /** RegularExpression Id. */
  int FINALLY = 31;
  /** RegularExpression Id. */
  int FLOAT = 32;
  /** RegularExpression Id. */
  int FOR = 33;
  /** RegularExpression Id. */
  int GOTO = 34;
  /** RegularExpression Id. */
  int IF = 35;
  /** RegularExpression Id. */
  int IMPLEMENTS = 36;
  /** RegularExpression Id. */
  int IMPORT = 37;
  /** RegularExpression Id. */
  int INSTANCEOF = 38;
  /** RegularExpression Id. */
  int INT = 39;
  /** RegularExpression Id. */
  int INTERFACE = 40;
  /** RegularExpression Id. */
  int LONG = 41;
  /** RegularExpression Id. */
  int NATIVE = 42;
  /** RegularExpression Id. */
  int NEW = 43;
  /** RegularExpression Id. */
  int NULL = 44;
  /** RegularExpression Id. */
  int PACKAGE = 45;
  /** RegularExpression Id. */
  int PRIVATE = 46;
  /** RegularExpression Id. */
  int PROTECTED = 47;
  /** RegularExpression Id. */
  int PUBLIC = 48;
  /** RegularExpression Id. */
  int RETURN = 49;
  /** RegularExpression Id. */
  int SHORT = 50;
  /** RegularExpression Id. */
  int STATIC = 51;
  /** RegularExpression Id. */
  int STRICTFP = 52;
  /** RegularExpression Id. */
  int SUPER = 53;
  /** RegularExpression Id. */
  int SWITCH = 54;
  /** RegularExpression Id. */
  int SYNCHRONIZED = 55;
  /** RegularExpression Id. */
  int THIS = 56;
  /** RegularExpression Id. */
  int THROW = 57;
  /** RegularExpression Id. */
  int THROWS = 58;
  /** RegularExpression Id. */
  int TRANSIENT = 59;
  /** RegularExpression Id. */
  int TRUE = 60;
  /** RegularExpression Id. */
  int TRY = 61;
  /** RegularExpression Id. */
  int VOID = 62;
  /** RegularExpression Id. */
  int VOLATILE = 63;
  /** RegularExpression Id. */
  int WHILE = 64;
  /** RegularExpression Id. */
  int OPENMP_PRAGMA = 65;
  /** RegularExpression Id. */
  int PARALLEL = 66;
  /** RegularExpression Id. */
  int FIRSTPRIVATE = 67;
  /** RegularExpression Id. */
  int LASTPRIVATE = 68;
  /** RegularExpression Id. */
  int SHARED = 69;
  /** RegularExpression Id. */
  int NONE = 70;
  /** RegularExpression Id. */
  int REDUCTION = 71;
  /** RegularExpression Id. */
  int FREEGUI = 72;
  /** RegularExpression Id. */
  int GUI = 73;
  /** RegularExpression Id. */
  int TARGET = 74;
  /** RegularExpression Id. */
  int VIRTUAL = 75;
  /** RegularExpression Id. */
  int SCHEDULE = 76;
  /** RegularExpression Id. */
  int DYNAMIC = 77;
  /** RegularExpression Id. */
  int GUIDED = 78;
  /** RegularExpression Id. */
  int RUNTIME = 79;
  /** RegularExpression Id. */
  int AUTO = 80;
  /** RegularExpression Id. */
  int ORDERED = 81;
  /** RegularExpression Id. */
  int SECTIONS = 82;
  /** RegularExpression Id. */
  int SECTION = 83;
  /** RegularExpression Id. */
  int SINGLE = 84;
  /** RegularExpression Id. */
  int MASTER = 85;
  /** RegularExpression Id. */
  int CRITICAL = 86;
  /** RegularExpression Id. */
  int ATOMIC = 87;
  /** RegularExpression Id. */
  int FLUSH = 88;
  /** RegularExpression Id. */
  int BARRIER = 89;
  /** RegularExpression Id. */
  int NOWAIT = 90;
  /** RegularExpression Id. */
  int ASYNC = 91;
  /** RegularExpression Id. */
  int AWAIT = 92;
  /** RegularExpression Id. */
  int NUMTHREADS = 93;
  /** RegularExpression Id. */
  int COPYPRIVATE = 94;
  /** RegularExpression Id. */
  int CANCELLATION_POINT = 95;
  /** RegularExpression Id. */
  int CANCEL = 96;
  /** RegularExpression Id. */
  int TASKGROUP = 97;
  /** RegularExpression Id. */
  int LOCAL = 98;
  /** RegularExpression Id. */
  int GLOBAL = 99;
  /** RegularExpression Id. */
  int TAG = 100;
  /** RegularExpression Id. */
  int ASTASK = 101;
  /** RegularExpression Id. */
  int LONG_LITERAL = 102;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 103;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 104;
  /** RegularExpression Id. */
  int HEX_LITERAL = 105;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 106;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 107;
  /** RegularExpression Id. */
  int DECIMAL_FLOATING_POINT_LITERAL = 108;
  /** RegularExpression Id. */
  int DECIMAL_EXPONENT = 109;
  /** RegularExpression Id. */
  int HEXADECIMAL_FLOATING_POINT_LITERAL = 110;
  /** RegularExpression Id. */
  int HEXADECIMAL_EXPONENT = 111;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 112;
  /** RegularExpression Id. */
  int STRING_LITERAL = 113;
  /** RegularExpression Id. */
  int IDENTIFIER = 114;
  /** RegularExpression Id. */
  int LETTER = 115;
  /** RegularExpression Id. */
  int PART_LETTER = 116;
  /** RegularExpression Id. */
  int LPAREN = 117;
  /** RegularExpression Id. */
  int RPAREN = 118;
  /** RegularExpression Id. */
  int LBRACE = 119;
  /** RegularExpression Id. */
  int RBRACE = 120;
  /** RegularExpression Id. */
  int LBRACKET = 121;
  /** RegularExpression Id. */
  int RBRACKET = 122;
  /** RegularExpression Id. */
  int SEMICOLON = 123;
  /** RegularExpression Id. */
  int COMMA = 124;
  /** RegularExpression Id. */
  int DOT = 125;
  /** RegularExpression Id. */
  int AT = 126;
  /** RegularExpression Id. */
  int ASSIGN = 127;
  /** RegularExpression Id. */
  int LT = 128;
  /** RegularExpression Id. */
  int BANG = 129;
  /** RegularExpression Id. */
  int TILDE = 130;
  /** RegularExpression Id. */
  int HOOK = 131;
  /** RegularExpression Id. */
  int COLON = 132;
  /** RegularExpression Id. */
  int EQ = 133;
  /** RegularExpression Id. */
  int LE = 134;
  /** RegularExpression Id. */
  int GE = 135;
  /** RegularExpression Id. */
  int NE = 136;
  /** RegularExpression Id. */
  int SC_OR = 137;
  /** RegularExpression Id. */
  int SC_AND = 138;
  /** RegularExpression Id. */
  int INCR = 139;
  /** RegularExpression Id. */
  int DECR = 140;
  /** RegularExpression Id. */
  int PLUS = 141;
  /** RegularExpression Id. */
  int MINUS = 142;
  /** RegularExpression Id. */
  int STAR = 143;
  /** RegularExpression Id. */
  int SLASH = 144;
  /** RegularExpression Id. */
  int BIT_AND = 145;
  /** RegularExpression Id. */
  int BIT_OR = 146;
  /** RegularExpression Id. */
  int XOR = 147;
  /** RegularExpression Id. */
  int REM = 148;
  /** RegularExpression Id. */
  int LSHIFT = 149;
  /** RegularExpression Id. */
  int PLUSASSIGN = 150;
  /** RegularExpression Id. */
  int MINUSASSIGN = 151;
  /** RegularExpression Id. */
  int STARASSIGN = 152;
  /** RegularExpression Id. */
  int SLASHASSIGN = 153;
  /** RegularExpression Id. */
  int ANDASSIGN = 154;
  /** RegularExpression Id. */
  int ORASSIGN = 155;
  /** RegularExpression Id. */
  int XORASSIGN = 156;
  /** RegularExpression Id. */
  int REMASSIGN = 157;
  /** RegularExpression Id. */
  int LSHIFTASSIGN = 158;
  /** RegularExpression Id. */
  int RSIGNEDSHIFTASSIGN = 159;
  /** RegularExpression Id. */
  int RUNSIGNEDSHIFTASSIGN = 160;
  /** RegularExpression Id. */
  int ELLIPSIS = 161;
  /** RegularExpression Id. */
  int RUNSIGNEDSHIFT = 162;
  /** RegularExpression Id. */
  int RSIGNEDSHIFT = 163;
  /** RegularExpression Id. */
  int GT = 164;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_JAVA_DOC_COMMENT = 1;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "<SINGLE_LINE_COMMENT>",
    "<token of kind 7>",
    "\"/*\"",
    "\"*/\"",
    "\"*/\"",
    "<token of kind 11>",
    "\"abstract\"",
    "\"assert\"",
    "\"boolean\"",
    "\"break\"",
    "\"byte\"",
    "\"case\"",
    "\"catch\"",
    "\"char\"",
    "\"class\"",
    "\"const\"",
    "\"continue\"",
    "\"default\"",
    "\"do\"",
    "\"double\"",
    "\"else\"",
    "\"enum\"",
    "\"extends\"",
    "\"false\"",
    "\"final\"",
    "\"finally\"",
    "\"float\"",
    "\"for\"",
    "\"goto\"",
    "\"if\"",
    "\"implements\"",
    "\"import\"",
    "\"instanceof\"",
    "\"int\"",
    "\"interface\"",
    "\"long\"",
    "\"native\"",
    "\"new\"",
    "\"null\"",
    "\"package\"",
    "\"private\"",
    "\"protected\"",
    "\"public\"",
    "\"return\"",
    "\"short\"",
    "\"static\"",
    "\"strictfp\"",
    "\"super\"",
    "\"switch\"",
    "\"synchronized\"",
    "\"this\"",
    "\"throw\"",
    "\"throws\"",
    "\"transient\"",
    "\"true\"",
    "\"try\"",
    "\"void\"",
    "\"volatile\"",
    "\"while\"",
    "\"//#omp\"",
    "\"parallel\"",
    "\"firstprivate\"",
    "\"lastprivate\"",
    "\"shared\"",
    "\"none\"",
    "\"reduction\"",
    "\"freeguithread\"",
    "\"gui\"",
    "\"target\"",
    "\"virtual\"",
    "\"schedule\"",
    "\"dynamic\"",
    "\"guided\"",
    "\"runtime\"",
    "\"auto\"",
    "\"ordered\"",
    "\"sections\"",
    "\"section\"",
    "\"single\"",
    "\"master\"",
    "\"critical\"",
    "\"atomic\"",
    "\"flush\"",
    "\"barrier\"",
    "\"nowait\"",
    "\"async\"",
    "\"await\"",
    "\"num_threads\"",
    "\"copyprivate\"",
    "\"cancellation point\"",
    "\"cancel\"",
    "\"taskgroup\"",
    "\"local\"",
    "\"global\"",
    "\"tag\"",
    "\"astask\"",
    "<LONG_LITERAL>",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<DECIMAL_FLOATING_POINT_LITERAL>",
    "<DECIMAL_EXPONENT>",
    "<HEXADECIMAL_FLOATING_POINT_LITERAL>",
    "<HEXADECIMAL_EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<PART_LETTER>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"@\"",
    "\"=\"",
    "\"<\"",
    "\"!\"",
    "\"~\"",
    "\"?\"",
    "\":\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"%\"",
    "\"<<\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"%=\"",
    "\"<<=\"",
    "\">>=\"",
    "\">>>=\"",
    "\"...\"",
    "\">>>\"",
    "\">>\"",
    "\">\"",
    "\"\\u001a\"",
  };

}
