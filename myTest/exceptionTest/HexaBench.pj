package exceptionTest;

import pj.*;
import java.io.PrintWriter;

public class HexaBench{
	public static void main(String[] args) {
        String fname = "default";
        int iteration = 1000;
        int threadnum = 4;
        
  		if (args.length > 1) {
            if (null != args[0]) {
                fname = args[0];
            }
            if (args.length >2 && null != args[1]) {
                iteration = Integer.parseInt(args[1]);
            }
            if (args.length >3 && null != args[2]) {
                threadnum = Integer.parseInt(args[2]);
            }
        }
 		if (args.length > 4 && args[3].equals("B")) {
        	recordTimeBare(fname, iteration, threadnum);
        } else {
            recordTime(fname, iteration, threadnum);
        }
    }

    public static void recordTimeBare(String fileName, int n, int num) {
     	  PrintWriter writer_bare = null;
          try {
              writer_bare = new PrintWriter("./" + fileName + "_bare_t" + Integer.toString(num) + ".txt", "UTF-8");
          } catch (Exception e) {
              e.printStackTrace();
          }
         /******************************************/
        //warmup n/10 times
        for (int i=0; i<(n/10); i++) {
			double value = test_bare(num);
		}
        //BARE
		for (int i=0; i<n; i++) {
			double value = test_bare(num);
			writer_bare.println(value);
		}
		writer_bare.close();
    }

    public static void recordTime(String fileName, int n, int num) {
        PrintWriter writer_guarding = null;
        PrintWriter writer_checking = null;
        try {
            writer_guarding = new PrintWriter("./" + fileName + "_guarding_t" + Integer.toString(num) + ".txt", "UTF-8");
            writer_checking = new PrintWriter("./" + fileName + "_checking_t" + Integer.toString(num) + ".txt", "UTF-8");
        } catch (Exception e) {
            e.printStackTrace();
        }

		/******************************************/
        //warmup n/10 times
        for (int i=0; i<(n/10); i++) {
			double value = test_guarding(num);
		}
        //GUARDING
		for (int i=0; i<n; i++) {
			double value = test_guarding(num);
			writer_guarding.println(value);
		}
		writer_guarding.close();
		/******************************************/
        //warmup n/10 times
        for (int i=0; i<(n/10); i++) {
			double value = test_barrierChecking(num);
		}
        //CHECKING
		for (int i=0; i<n; i++) {
			double value = test_barrierChecking(num);
			writer_checking.println(value);
		}
		writer_checking.close();
    }

	public static double test_bare(int num) {
		long end = 0;
		long start = System.nanoTime();
			//#omp parallel num_threads(num)
			{
				for(int i=0; i<100; i++) {
					//#omp barrier
				}
			}
		end = System.nanoTime()-start;
		return (double)(end)/1000000; //nanoseconds-> microseconds-> miliseconds
	}
	
	// souround parallel region with try-catch block
	public static double test_guarding(int num) {
		long end = 0;
		long start = System.nanoTime();
		try {

			//#omp parallel shared(start) num_threads(num)
			{

				for(int i=0; i<100; i++) {
					//#omp barrier
				}

			}
			
		} catch (RuntimeException e) {
			System.out.println("new Handling thread outside parallel region " + e);
		} 
		end = System.nanoTime()-start;
		return (double)(end)/1000000; //nanoseconds-> microseconds-> miliseconds
	}

	// surround parallel region with try-catch block
	public static double test_barrierChecking(int num) {
		long end = 0;
		long start = System.nanoTime();
		try {

			//#omp parallel shared(start) num_threads(num)
			{

				for(int i=0; i<100; i++) {
					//#omp barrier
					//#omp cancellation point parallel
				}

			}
			
		} catch (RuntimeException e) {
			System.out.println("new Handling thread outside parallel region " + e);
		} 
		end = System.nanoTime()-start;
		return (double)(end)/1000000; //nanoseconds-> microseconds-> miliseconds
	}

	// souround parallel region with try-catch block
	public static double test_new() {
		long end = 0;
		long start = System.nanoTime();
		try {

			//#omp parallel shared(start)
			{
				//System.out.println("first Stage");


				if (Pyjama.omp_get_thread_num() == 1) {
					start = System.nanoTime();
					throw new RuntimeException("A thread throws an exception");
				} 
				//#omp barrier
				System.out.println("second stage");

			}
			
		} catch (RuntimeException e) {
			System.out.println("new Handling thread outside parallel region " + e);
		} 
		end = System.nanoTime()-start;
		return (double)(end)/1000000; //nanoseconds-> microseconds-> miliseconds
	}

//does not handle locally, stop entire parallel region, using conventional programming style
	public static double test_old() {
		RuntimeException re = new RuntimeException("null");
		RuntimeException reNull = re;
		long end = 0;
    	long start = System.nanoTime();

		//#omp parallel shared(re, start)
		{
			try{
				if (Pyjama.omp_get_thread_num() == 1) {
					re = new RuntimeException("A thread throws an exception");
					start = System.nanoTime();
				}
			}catch (RuntimeException e){
				//#omp critical 
				{
					re = e;
					//#omp cancel parallel global
				} 
			}	
				//#omp barrier
				System.out.println("second stage");
		}

		if (re != reNull) {
			System.out.println("Old Handling thread outside parallel region " + re);
		}
		//System.out.println("finally");
		end = System.nanoTime()-start;
		return (double)(end)/1000000; //nanoseconds-> microseconds-> miliseconds
	}
}