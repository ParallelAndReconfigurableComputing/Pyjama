package exceptionTest;

import pj.*;
import java.io.PrintWriter;

public class CompareBench{
	public static void main (String[] args) {
       	String fname = "default";
		int iteration = 1000;
		int threadnum = 4; 
        if (args.length > 0) {
            if (null != args[0]) {
                fname = args[0];
            }
            if (args.length > 1 && null != args[1]) {
                iteration = Integer.parseInt(args[1]);
            }
            if (args.length > 2 && null != args[2]) {
                threadnum = Integer.parseInt(args[2]);
            }
        }
		recordTime(fname, iteration, threadnum);
	}

	public static void recordTime(String fileName, int n, int num) {
		PrintWriter writer_new = null;
        PrintWriter writer_old = null;
		try {
			writer_new = new PrintWriter("./" + fileName + "_new_t" + Integer.toString(num) + ".txt", "UTF-8");
            writer_old = new PrintWriter("./" + fileName + "_old_t" + Integer.toString(num) + ".txt", "UTF-8");
		} catch (Exception e) {
			e.printStackTrace();
		}

        //warmup n/10 times
        for (int i=0; i<(n/10); i++) {
			double value = test_old(num);
		}
        //OLD
		for (int i=0; i<n; i++) {
			double value = test_old(num);
			writer_old.println(value);
		}
		writer_old.close();

        //warmup n/10 times
        for (int i=0; i<(n/10); i++) {
			double value = test_new(num);
		}
        //NEW
		for (int i=0; i<n; i++) {
			double value = test_new(num);
			writer_new.println(value);
		}
		writer_new.close();

	}
	
	// souround parallel region with try-catch block
	public static double test_new(int num) {
		long end = 0;
		long start = System.nanoTime();
		try {
			Pyjama.omp_set_num_threads(num);
			//#omp parallel shared(start) 
			{
				if (Pyjama.omp_get_thread_num() == 1) {
					start = System.nanoTime();
					throw new RuntimeException("A thread throws an exception");
				} 
				//#omp barrier
				System.out.println("second stage");

			}
			
		} catch (RuntimeException e) {
			System.out.println("new Handling thread outside parallel region " + e);
		} 
		end = System.nanoTime()-start;
		return (double)(end)/1000000; //nanoseconds-> microseconds-> miliseconds
	}

//does not handle locally, stop entire parallel region, using conventional programming style
	public static double test_old(int num) {
		RuntimeException re = new RuntimeException("null");
		RuntimeException reNull = re;
		long end = 0;
    	long start = System.nanoTime();
    	Pyjama.omp_set_num_threads(num);
		//#omp parallel shared(re, start) 
		{
			try{
				if (Pyjama.omp_get_thread_num() == 1) {
	                start = System.nanoTime();
					re = new RuntimeException("A thread throws an exception");
				}
			}catch (RuntimeException e){
				//#omp critical 
				{
					re = e;
					//#omp cancel parallel global
				} 
			}	
				//#omp barrier
				System.out.println("second stage");
		}

		if (re != reNull) {
			System.out.println("Old Handling thread outside parallel region " + re);
		}
		end = System.nanoTime()-start;
		return (double)(end)/1000000; //nanoseconds-> microseconds-> miliseconds
	}
}