package exceptionTest;

import java.io.PrintWriter;
import utils.SimulateWork;

public class SyncBenchPar {
	
	public static void main(String[] args) {
        String fname = "hexa";
        int iteration = 10;
        int maxthread = 16;
        recordTimePar(fname, iteration, maxthread);
    
    }

	public static void recordTimePar(String fileName, int iter, int maxthreads) {
		PrintWriter writer_pr = null;
		PrintWriter writer_ws = null;
		PrintWriter writer_bar = null;
		try {
			writer_pr = new PrintWriter("./" + fileName + "_PAR_PR" + ".csv", "UTF-8");
			writer_ws = new PrintWriter("./" + fileName + "_PAR_WS" + ".csv", "UTF-8");
			writer_bar = new PrintWriter("./" + fileName + "_PAR_BAR" + ".csv", "UTF-8");
		} catch (Exception e) {
			e.printStackTrace();
		}
		/*************************************/
		writer_pr.println("\"nthreads\", \"type\", \"time\"");
		for (int nthreads = 2; nthreads <= maxthreads; nthreads++) {
			for (int j=0; j<iter; j++) {
				double value = testpr_bare(nthreads);
				writer_pr.println(nthreads + ", bare, " + value);
				System.out.println(nthreads + ", bare, " + value);
			}
			for (int j=0; j<iter; j++) {
				double value = testpr_guarding(nthreads);
				writer_pr.println(nthreads + ", guarding, " + value);
				System.out.println(nthreads + ", guarding, " + value);
			}
			for (int j=0; j<iter; j++) {
				double value = testpr_checking(nthreads);
				writer_pr.println(nthreads + ", checking, " + value);
				System.out.println(nthreads + ", checking, " + value);
			}
		}
		writer_pr.close();
		/*************************************/
		writer_ws.println("\"nthreads\", \"type\", \"time\"");
		for (int nthreads = 2; nthreads <= maxthreads; nthreads++) {
			for (int j=0; j<iter; j++) {
				double value = testfor_bare(64, nthreads);
				writer_ws.println(nthreads + ", bare, " + value);
				System.out.println(nthreads + ", bare, " + value);
			}
			for (int j=0; j<iter; j++) {
				double value = testfor_guarding(64, nthreads);
				writer_ws.println(nthreads + ", guarding, " + value);
				System.out.println(nthreads + ", guarding, " + value);
			}
			for (int j=0; j<iter; j++) {
				double value = testfor_checking(64, nthreads);
				writer_ws.println(nthreads + ", checking, " + value);
				System.out.println(nthreads + ", checking, " + value);
			}
			
		}
		writer_ws.close();
		
		/*************************************/
		writer_bar.println("\"nthreads\", \"type\", \"time\"");
		for (int nthreads = 2; nthreads <= maxthreads; nthreads++) {
			for (int j=0; j<iter; j++) {
				double value = testbar_bare(5, nthreads);
				writer_bar.println(nthreads + ", bare, " + value);
				System.out.println(nthreads + ", bare, " + value);
			}
			for (int j=0; j<iter; j++) {
				double value = testbar_guarding(5, nthreads);
				writer_bar.println(nthreads + ", guarding, " + value);
				System.out.println(nthreads + ", guarding, " + value);
			}
			for (int j=0; j<iter; j++) {
				double value = testbar_checking(5, nthreads);
				writer_bar.println(nthreads + ", checking, " + value);
				System.out.println(nthreads + ", checking, " + value);
			}
			
		}
		writer_bar.close();
		
	}
	
	static double testpr_bare(int nthreads) {
		//workload: num threads
	    long end = 0;
	    long start = System.nanoTime();
	    Pyjama.omp_set_num_threads(nthreads);
	    //#omp parallel
		{
			    delay(1);	
		}
	    end = System.nanoTime() - start;
        return (double) (end) / 1000000;
	}
	static double testpr_guarding(int nthreads) {
		//workload: num threads
	    long end = 0;
	    long start = System.nanoTime();
	    Pyjama.omp_set_num_threads(nthreads);
	    try {
	    //#omp parallel
		{
			    delay(1);	
		}
	    } catch (RuntimeException e) {
			System.out.println("new Handling thread outside parallel region " + e);
		} 
	    end = System.nanoTime() - start;
        return (double) (end) / 1000000;
	}
	static double testpr_checking(int nthreads) {
		//workload: num threads
	    long end = 0;
	    long start = System.nanoTime();
	    Pyjama.omp_set_num_threads(nthreads);
	    try {
	    //#omp parallel
		{
			    delay(1);	
			    //#omp cancellation point parallel
		}
	    } catch (RuntimeException e) {
			System.out.println("new Handling thread outside parallel region " + e);
		} 
	    end = System.nanoTime() - start;
        return (double) (end) / 1000000;
	}
	
	static double testfor_bare(int workload, int nthreads) {
		//workload: iteration num
	    long end = 0;
	    Pyjama.omp_set_num_threads(nthreads);
	    long start = System.nanoTime();
	    //#omp parallel for shared(workload)
		for (int i = 0; i < workload; i++) {
			 delay(1);
		}
	    end = System.nanoTime() - start;
        return (double) (end) / 1000000;
	}

	static double testfor_guarding(int workload, int nthreads) {
		//workload: iteration num
	    long end = 0;
	    Pyjama.omp_set_num_threads(nthreads);
	    long start = System.nanoTime();
	    try {
	    //#omp parallel for shared(workload)
		for (int i = 0; i < workload; i++) {
			 delay(1);
		}
		} catch (RuntimeException e) {
			System.out.println("new Handling thread outside parallel region " + e);
		} 
	    end = System.nanoTime() - start;
        return (double) (end) / 1000000;
	}

	static double testfor_checking(int workload, int nthreads) {
		//workload: iteration num
	    long end = 0;
	    Pyjama.omp_set_num_threads(nthreads);
	    long start = System.nanoTime();
	    try {
	    //#omp parallel for shared(workload)
		for (int i = 0; i < workload; i++) {
			 delay(1);
			 //#omp cancellation point parallel
		}
		} catch (RuntimeException e) {
			System.out.println("new Handling thread outside parallel region " + e);
		} 
	    end = System.nanoTime() - start;
        return (double) (end) / 1000000;
	}
	
	static double testbar_bare(int barrierNum, int nthreads) {
	    long end = 0;
	    Pyjama.omp_set_num_threads(nthreads);
	    long start = System.nanoTime();
	    //#omp parallel shared(barrierNum)
	    {
		    for (int j = 0; j < barrierNum; j++) {
		        delay(1);
	            //#omp barrier
		    }
	    }
	    end = System.nanoTime() - start;
        return (double) (end) / 1000000;
	}

	static double testbar_guarding(int barrierNum, int nthreads) {
		//workload: num threads
	    long end = 0;
	    Pyjama.omp_set_num_threads(nthreads);
	    long start = System.nanoTime();
	    try {
	    //#omp parallel shared(barrierNum)
	    {
		    for (int j = 0; j < barrierNum; j++) {
		        delay(1);
	            //#omp barrier
		    }
	    }
		} catch (RuntimeException e) {
			System.out.println("new Handling thread outside parallel region " + e);
		} 
	    end = System.nanoTime() - start;
        return (double) (end) / 1000000;
	}

	static double testbar_checking(int barrierNum, int nthreads) {
		//workload: num threads
	    long end = 0;
	    Pyjama.omp_set_num_threads(nthreads);
	    long start = System.nanoTime();
	    try {
	    //#omp parallel shared(barrierNum)
	    {
		    for (int j = 0; j < barrierNum; j++) {
		        delay(1);
	            //#omp barrier
		        //#omp cancellation point parallel
		    }
	    }
		} catch (RuntimeException e) {
			System.out.println("new Handling thread outside parallel region " + e);
		} 
	    end = System.nanoTime() - start;
        return (double) (end) / 1000000;
	}

	
	static void delay(int n) {
		for (int i=0; i<n; i++) {
			SimulateWork.work(100);
		}
	}


}
