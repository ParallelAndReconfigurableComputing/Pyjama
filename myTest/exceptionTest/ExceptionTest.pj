package exceptionTest;

import pj.*;

public class ExceptionTest{
	public static void main (String[] args) {
		test2();
	}


//handling locally
	public static void test1() {
		//#omp parallel
		{
			System.out.println("first Stage");
			try {
				if (Pyjama.omp_get_thread_num() == 1) {
					throw new RuntimeException("HH");
				} else {
					for(int i=0; i<9999999; i++);
				}
			}catch (RuntimeException e){
				System.out.println("recovery" + e);
			}finally {
				System.out.println("finallay");
			}
			//#omp barrier
			System.out.println("second stage");
			//#omp barrier
			System.out.println("third stage");
		}
	}

//does not handle locally
	public static void test2() {
		//#omp parallel
		{
			System.out.println("first Stage");
			if (Pyjama.omp_get_thread_num() == 1) {
				throw new RuntimeException("A thread throws an exception");
			} else {
				for(int i=0; i<9999999; i++);
			}
			//#omp barrier
			System.out.println("second stage");
			//#omp barrier
			System.out.println("third stage");
		}
	}


	public static void test3() {
		try {
			//#omp parallel
			{
				System.out.println("first Stage");
				if (Pyjama.omp_get_thread_num() == 0) {
					throw new RuntimeException("A thread throws an exception");
				} else {
					for(int i=0; i<9999999; i++);
				}
			}
		} catch (RuntimeException e) {
			System.out.println("catch");
		} finally {
			System.out.println("finally");
		}
	}

	public static void test4() {
		//#omp parallel for
		for(int i=0; i<10; i++) {
			System.out.println("i="+i+"==>"+Pyjama.omp_get_thread_num());
		}
	}
}